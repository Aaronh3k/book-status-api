openapi: 3.0.1
info:
  title: Book Status API
  description: REST API documentation for Book Status Service.
  version: 0.0.1
servers:
  - url: /
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      operationId: getBooks
      parameters:
        - name: page_number
          in: query
          schema:
            type: integer
        - name: page_offset
          in: query
          schema:
            type: integer
        - name: orderby
          in: query
          schema:
            type: integer
        - name: sortby
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllBooks"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No books found
          content: []
    post:
      tags:
        - Books
      summary: Create a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/isbn/{isbn}:
    get:
      tags:
        - Books
      summary: Get a book's information by ISBN
      operationId: getBookByIsbn
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        404:
          description: No books found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorBook"
  /books/upload:
    post:
      tags:
        - Books
      summary: Upload books using Google Books API
      operationId: uploadBooks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                number_of_books:
                  type: integer
                keyword:
                  type: string
        required: true
      responses:
        202:
          description: Book upload request received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /books/{book_id}:
    get:
      tags:
        - Books
      summary: Get a book
      operationId: getBook
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        404:
          description: No books found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorBook"
    patch:
      tags:
        - Books
      summary: Update a book
      operationId: updateBook
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No books found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorBook"
    delete:
      tags:
        - Books
      summary: Delete a book permanently
      operationId: deleteBook
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookId"
        400:
          description: Book deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No books found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorBook"

  /reading_lists:
    get:
      tags:
        - Reading Lists
      summary: Get many reading lists' information
      operationId: getReadingLists
      parameters:
        - name: page_number
          in: query
          schema:
            type: integer
        - name: page_offset
          in: query
          schema:
            type: integer
        - name: orderby
          in: query
          schema:
            type: integer
        - name: sortby
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [unread, in_progress, finished]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingLists"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No reading lists found
          content: []
    post:
      tags:
        - Reading Lists
      summary: Create a new reading list
      operationId: createReadingList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReadingList"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingListId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reading_lists/{list_id}:
    get:
      tags:
        - Reading Lists
      summary: Get a reading list
      operationId: getReadingList
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingList"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No reading list found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorReadingList"
    patch:
      tags:
        - Reading Lists
      summary: Update a reading list
      operationId: updateReadingList
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReadingList"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingListId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No such reading list found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorReadingList"
    delete:
      tags:
        - Reading Lists
      summary: Delete a reading list permanently
      operationId: deleteReadingList
      parameters:
        - name: list_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingListId"
        400:
          description: Reading list deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No such reading list found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorReadingList"

  /ratings:
    get:
      tags:
        - Ratings
      summary: Get all ratings
      operationId: getRatings
      parameters:
        - name: page_number
          in: query
          schema:
            type: integer
        - name: page_offset
          in: query
          schema:
            type: integer
        - name: orderby
          in: query
          schema:
            type: integer
        - name: sortby
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllRatings"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No ratings found
          content: []
    post:
      tags:
        - Ratings
      summary: Create a new rating
      operationId: createRating
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRating"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ratings/{rating_id}:
    get:
      tags:
        - Ratings
      summary: Get a rating
      operationId: getRating
      parameters:
        - name: rating_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No such rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorRating"
    patch:
      tags:
        - Ratings
      summary: Update a rating
      operationId: updateRating
      parameters:
        - name: rating_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRating"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingId"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No such rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorRating"
    delete:
      tags:
        - Ratings
      summary: Delete a rating permanently
      operationId: deleteRating
      parameters:
        - name: rating_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingId"
        400:
          description: Rating deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: No such rating found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorRating"

components:
  schemas:
    AllBooks:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    Book:
      type: object
      properties:
        book_id:
          type: string
        ISBN:
          type: string
        title:
          type: string
        author:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateBook:
      type: object
      properties:
        ISBN:
          type: string
        title:
          type: string
        author:
          type: string
    UpdateBook:
      type: object
      properties:
        ISBN:
          type: string
        title:
          type: string
        author:
          type: string
    BookId:
      type: object
      properties:
        message:
          type: string
          example: "successfully updated book_id=<book_id>"
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        code:
          type: string
        service:
          type: string
    NotFoundErrorBook:
      type: object
      properties:
        error:
          type: string
          example: "No such book found"

    ReadingLists:
      type: object
      properties:
        reading_lists:
          type: array
          items:
            $ref: "#/components/schemas/ReadingList"
        reading_list_count:
          type: integer
        page_number:
          type: integer
        page_offset:
          type: integer
    ReadingList:
      type: object
      properties:
        list_id:
          type: string
        book_id:
          type: string
        status:
          type: string
          enum: [unread, in_progress, finished]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateReadingList:
      type: object
      properties:
        book_id:
          type: string
        status:
          type: string
          enum: [unread, in_progress, finished]
      required:
        - book_id
        - status
    UpdateReadingList:
      type: object
      properties:
        book_id:
          type: string
        status:
          type: string
          enum: [unread, in_progress, finished]
      required:
        - status
    ReadingListId:
      type: object
      properties:
        list_id:
          type: string
    NotFoundErrorReadingList:
      type: object
      properties:
        error:
          type: string
          example: "No such reading list found"

    AllRatings:
      type: object
      properties:
        ratings:
          type: array
          items:
            $ref: "#/components/schemas/Rating"
    Rating:
      type: object
      properties:
        rating_id:
          type: string
        book_id:
          type: string
        list_id:
          type: string
        rating:
          type: integer
        notes:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateRating:
      type: object
      properties:
        book_id:
          type: string
        list_id:
          type: string
        rating:
          type: integer
        notes:
          type: string
    UpdateRating:
      type: object
      properties:
        rating:
          type: integer
        notes:
          type: string
    RatingId:
      type: object
      properties:
        rating_id:
          type: string
    NotFoundErrorRating:
      type: object
      properties:
        error:
          type: string
          example: "No such ratings found"
